#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
magellan - marine magnetic anomaly modeller
Copyright (C) 2008 Tryggvi Bj√∂rgvinsson <tryggvib@hi.is>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys, getopt
from Magellan.data import *
from Magellan.calc import *
from Magellan.plot import *

def parse_opts():

    options = {'asymmetry':None,
               'config':None,
               'graphs':None,
               'jump':None,
               'magnetization':None,
               'spreadingrate':None,
               'timescale':None,
               'pointspacing':None,}
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "a:b:c:d:g:i:j:m:o:s:t:z:p:h",
                                   ["asymmetry=",
				    "azimuth=",
                                    "config=",
                                    "declination="
                                    "graph=", #Not implemented
                                    "inclination="
                                    "jump=",
                                    "magnetization=",
				    "obliquity=",
                                    "spreadingrate=",
                                    "timescale=",
                                    "thickness=",
                                    "pointspacing=",
                                    "help",])
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        sys.exit(2)
    for o, a in opts:
        if o in ("-a", "--asymmetry"):
            options['asymmetry'] = a
        if o in ("-b", "--azimuth"):
            options['azimuth'] = a
        if o in ("-c", "--config"):
            options['config'] = a
        if o in ("-d", "--declination"):
            options['declination'] =  a
        if o in ("-g", "--graph"):
            options['graphs'] = a
        if o in ("-i", "--inclination"):
            options['inclination'] =  a
        if o in ("-j", "--jump"):
            options['jump'] =  a
        if o in ("-m", "--magnetization"):
            options['magnetization'] = a
        if o in ("-o", "--obliquity"):
            options['oblituity'] =  a
        if o in ("-s", "--spreadingrate"):
            options['spreadingrate'] =  a
        if o in ("-t", "--timescale"):
            options['timescale'] =  a
        if o in ("-z", "--thickness"):
            options['thickness'] =  a
        if o in ("-p", "--pointspacing"):
            options['pointspacing'] = a
        if o in ("-h", "--help"):
            usage()
            sys.exit()

    return (options, args)

def usage():
    print "Usage: magellan [OPTION]... [FILE]"
    print "Options:"
    print "      -a [FILE]\t asymmetry file"
    print "      -j [FILE]\t jump file"
    print "      -s [FILE]\t spreading rate file"
    print "      -t [FILE]\t time scale file"
    print "      -m [FILE]\t magnetization file"
    print "      -c [FILE]\t configuration file"
    print "      -b value \t azimuth of profile"
    print "      -d value \t amount of declination"
    print "      -i value \t amount of inclination"
    print "      -z value \t thickness of layer"
    print "      -o value \t obliquity of profile"
    print "      -p value \t spacing between points in calculations"
    print "      -h       \t print this help"

if __name__ == '__main__':
    (files, arguments) = parse_opts()
    
    configs = get_configurations(files['config'])
    parameters = get_configurations(files['config'])
    
    if len(arguments) == 0:
        datafile = configs.pop('data', None)
        if datafile == None:
            print "No track data file given\n"
            sys.exit()
    else:
        datafile = arguments[0]

    
    for key in configs.keys():
        if files.has_key(key):
            files[key] = configs.pop(key, None)
        else: 
	    configs.pop(key, None)
    

    asym = get_asymmetry(files['asymmetry'])
    spread = get_spreadingrate(files['spreadingrate'])
    jump = get_jumps(files['jump'])
    magnet = get_magnetization(files['magnetization'])
    timescale = get_timescale(files['timescale'])

    (dist, deep, dist_anom, anom) = get_trackdata(datafile)
    
    timeline = create_change_timeline(asym,spread,jump,magnet,timescale)
    
    
    (delta_l, delta_r) = create_deltax(timeline)
   
    mag_layer = create_magnetized_layer(delta_l, delta_r,
                                        min(dist), max(dist))

    projected_mag_layer = create_projected_magnetized_layer(mag_layer,parameters)
    #print projected_mag_layer
    #for ((start,stop),color,mag) in projected_mag_layer:
	#print start, stop, color


    faults_and_rifts = create_faults_and_rifts(delta_l, delta_r,
                                               min(dist), max(dist))
    #print faults_and_rifts
    f=open('pf', 'w')
    for (dista,fault,rift) in faults_and_rifts:
	if fault:
	    f.write(str(dista) + "\n")
    f.close()

    f=open('fr', 'w')
    for (dista,fault,rift) in faults_and_rifts:
	if rift:
	    f.write(str(dista) + "\n")
    f.close()

    projected_anom_model = create_anomaly_model(dist,deep,files,projected_mag_layer)
    

    anom_model = inv_project_anomaly_model(projected_anom_model)

    f=open('tryggvi','w')
    for i in range(0,len(dist_anom)):
	f.write(str(dist_anom[i]) + " " + str(anom_model[i+20]) + " " + str(anom[i]) + " " +  str(deep[i+20]) + "\n")
    f.close()
    
    f=open('magellano','w')
    for i in range(0,len(dist_anom)):
	f.write(str(dist_anom[i]) + " " + str(anom_model[i+20]) + "\n")
    f.close()
    #for i in range(0,len(dist_anom)):
	#print dist_anom[i], anom_model[i+20]

    #for i in range(0,len(dist_anom)):
	#print dist_anom[i], anom_model[i+20], anom[i]

    create_plot(dist, dist_anom, deep, anom, mag_layer,
                faults_and_rifts, anom_model, configs)

